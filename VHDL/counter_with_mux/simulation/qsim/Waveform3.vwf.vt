// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/29/2023 18:20:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          automatic_counter_with_mux
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module automatic_counter_with_mux_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock_auto;
reg sw0;
reg sw16;
reg sw17;
// wires                                               
wire a;
wire b;
wire banana;
wire c;
wire d;
wire e;
wire f;
wire g;

// assign statements (if any)                          
automatic_counter_with_mux i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.banana(banana),
	.c(c),
	.clock_auto(clock_auto),
	.d(d),
	.e(e),
	.f(f),
	.g(g),
	.sw0(sw0),
	.sw16(sw16),
	.sw17(sw17)
);
initial 
begin 
#1000000 $finish;
end 

// clock_auto
always
begin
	clock_auto = 1'b0;
	clock_auto = #500000 1'b1;
	#500000;
end 
endmodule

