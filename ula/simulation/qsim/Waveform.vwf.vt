// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/26/2023 20:03:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ula
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ula_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a2;
reg a3;
reg a_LSB;
reg a_MSB;
reg b2;
reg b3;
reg b_LSB;
reg b_MSB;
reg bb;
reg c_in;
reg SEL0;
reg SEL1;
// wires                                               
wire a_o;
wire b_o;
wire c_o;
wire cout;
wire d_o;
wire e_o;
wire f_o;
wire g_o;
wire Lsb0;
wire Lsb1;
wire Lsb2;
wire Msb;

// assign statements (if any)                          
ula i1 (
// port map - connection between master ports and signals/registers   
	.a2(a2),
	.a3(a3),
	.a_LSB(a_LSB),
	.a_MSB(a_MSB),
	.a_o(a_o),
	.b2(b2),
	.b3(b3),
	.b_LSB(b_LSB),
	.b_MSB(b_MSB),
	.b_o(b_o),
	.bb(bb),
	.c_in(c_in),
	.c_o(c_o),
	.cout(cout),
	.d_o(d_o),
	.e_o(e_o),
	.f_o(f_o),
	.g_o(g_o),
	.Lsb0(Lsb0),
	.Lsb1(Lsb1),
	.Lsb2(Lsb2),
	.Msb(Msb),
	.SEL0(SEL0),
	.SEL1(SEL1)
);
initial 
begin 
#1000000 $finish;
end 

// a_LSB
initial
begin
	a_LSB = 1'b0;
end 

// a2
initial
begin
	a2 = 1'b0;
end 

// a3
initial
begin
	a3 = 1'b0;
end 

// a_MSB
initial
begin
	a_MSB = 1'b0;
end 

// b_LSB
initial
begin
	b_LSB = 1'b0;
end 

// b2
initial
begin
	b2 = 1'b0;
end 

// b3
initial
begin
	b3 = 1'b0;
end 

// b_MSB
initial
begin
	b_MSB = 1'b0;
end 

// bb
initial
begin
	bb = 1'b0;
end 

// c_in
initial
begin
	c_in = 1'b0;
end 

// SEL0
initial
begin
	SEL0 = 1'b0;
end 

// SEL1
initial
begin
	SEL1 = 1'b0;
end 
endmodule

